// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package pg

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const deleteProject = `-- name: DeleteProject :exec
UPDATE
    projects
SET
    deleted_at = NOW()
WHERE
    public_id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, publicID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProject, publicID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE
    users
SET
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const insertProject = `-- name: InsertProject :one
INSERT INTO
    projects (name, description, owner_id)
VALUES
    ($1, $2, $3) RETURNING id, public_id, name, description, owner_id, created_at, updated_at, deleted_at
`

type InsertProjectParams struct {
	Name        string
	Description string
	OwnerID     int
}

func (q *Queries) InsertProject(ctx context.Context, arg InsertProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, insertProject, arg.Name, arg.Description, arg.OwnerID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertProjectAssignment = `-- name: InsertProjectAssignment :one
INSERT INTO
    project_assignments (project_id, user_id, project_owner_id)
VALUES
    ($1, $2, $3) RETURNING project_id, user_id, project_owner_id
`

type InsertProjectAssignmentParams struct {
	ProjectID      int
	UserID         int
	ProjectOwnerID int
}

func (q *Queries) InsertProjectAssignment(ctx context.Context, arg InsertProjectAssignmentParams) (ProjectAssignment, error) {
	row := q.db.QueryRowContext(ctx, insertProjectAssignment, arg.ProjectID, arg.UserID, arg.ProjectOwnerID)
	var i ProjectAssignment
	err := row.Scan(&i.ProjectID, &i.UserID, &i.ProjectOwnerID)
	return i, err
}

const insertProjectInvitation = `-- name: InsertProjectInvitation :one
INSERT INTO
    project_invitations (project_id, email, token, sent_at, expires_at)
VALUES
    ($1, $2, $3, $4, $5) RETURNING project_id, email, token, sent_at, expires_at, accepted_at
`

type InsertProjectInvitationParams struct {
	ProjectID int
	Email     string
	Token     string
	SentAt    time.Time
	ExpiresAt time.Time
}

func (q *Queries) InsertProjectInvitation(ctx context.Context, arg InsertProjectInvitationParams) (ProjectInvitation, error) {
	row := q.db.QueryRowContext(ctx, insertProjectInvitation,
		arg.ProjectID,
		arg.Email,
		arg.Token,
		arg.SentAt,
		arg.ExpiresAt,
	)
	var i ProjectInvitation
	err := row.Scan(
		&i.ProjectID,
		&i.Email,
		&i.Token,
		&i.SentAt,
		&i.ExpiresAt,
		&i.AcceptedAt,
	)
	return i, err
}

const insertProjectTodoStates = `-- name: InsertProjectTodoStates :exec
INSERT INTO
    project_todo_states (name, item_order, project_id)
VALUES
    ('ready', 0, $1),
    ('in-progress', 1, $1),
    ('done', 2, $1)
`

func (q *Queries) InsertProjectTodoStates(ctx context.Context, projectID int) error {
	_, err := q.db.ExecContext(ctx, insertProjectTodoStates, projectID)
	return err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
    users (first_name, last_name, email, PASSWORD)
VALUES
    ($1, $2, $3, $4) RETURNING id
`

type InsertUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var id int
	err := row.Scan(&id)
	return id, err
}

const projectById = `-- name: ProjectById :one
SELECT
    id, public_id, name, description, owner_id, created_at, updated_at, deleted_at
FROM
    projects
WHERE
    public_id = $1
    AND projects.deleted_at IS NULL
`

func (q *Queries) ProjectById(ctx context.Context, publicID uuid.UUID) (Project, error) {
	row := q.db.QueryRowContext(ctx, projectById, publicID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const projectsByUserId = `-- name: ProjectsByUserId :many
SELECT
    projects.id, projects.public_id, projects.name, projects.description, projects.owner_id, projects.created_at, projects.updated_at, projects.deleted_at,
    project_assignments.project_id, project_assignments.user_id, project_assignments.project_owner_id
FROM
    projects
    JOIN project_assignments ON projects.id = project_assignments.project_id
WHERE
    project_assignments.user_id = $1
    AND projects.deleted_at IS NULL
`

type ProjectsByUserIdRow struct {
	Project           Project
	ProjectAssignment ProjectAssignment
}

func (q *Queries) ProjectsByUserId(ctx context.Context, userID int) ([]ProjectsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, projectsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectsByUserIdRow
	for rows.Next() {
		var i ProjectsByUserIdRow
		if err := rows.Scan(
			&i.Project.ID,
			&i.Project.PublicID,
			&i.Project.Name,
			&i.Project.Description,
			&i.Project.OwnerID,
			&i.Project.CreatedAt,
			&i.Project.UpdatedAt,
			&i.Project.DeletedAt,
			&i.ProjectAssignment.ProjectID,
			&i.ProjectAssignment.UserID,
			&i.ProjectAssignment.ProjectOwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toDosByProjectId = `-- name: ToDosByProjectId :many
SELECT
    project_todo_states.id AS state_id,
    project_todo_states.name AS state_name,
    project_todo_states.item_order AS state_item_order,
    todos.id AS todo_id,
    todos.name AS todo_name,
    todos.description AS todo_description,
    todos.item_order AS todo_item_order
FROM
    project_todo_states
    LEFT JOIN todos ON project_todo_states.id = todos.state_id
WHERE
    project_todo_states.project_id = $1
ORDER BY
    project_todo_states.item_order,
    todos.item_order
`

type ToDosByProjectIdRow struct {
	StateID         int
	StateName       string
	StateItemOrder  int
	TodoID          sql.NullInt32
	TodoName        sql.NullString
	TodoDescription sql.NullString
	TodoItemOrder   sql.NullInt32
}

func (q *Queries) ToDosByProjectId(ctx context.Context, projectID int) ([]ToDosByProjectIdRow, error) {
	rows, err := q.db.QueryContext(ctx, toDosByProjectId, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ToDosByProjectIdRow
	for rows.Next() {
		var i ToDosByProjectIdRow
		if err := rows.Scan(
			&i.StateID,
			&i.StateName,
			&i.StateItemOrder,
			&i.TodoID,
			&i.TodoName,
			&i.TodoDescription,
			&i.TodoItemOrder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :exec
UPDATE
    projects
SET
    name = $1,
    description = $2
WHERE
    owner_id = $3
    AND public_id = $4
`

type UpdateProjectParams struct {
	Name        string
	Description string
	OwnerID     int
	PublicID    uuid.UUID
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Name,
		arg.Description,
		arg.OwnerID,
		arg.PublicID,
	)
	return err
}

const user = `-- name: User :one
SELECT
    id, first_name, last_name, email, password, created_at, updated_at, deleted_at
FROM
    users
WHERE
    id = $1
    AND deleted_at IS NULL
LIMIT
    1
`

func (q *Queries) User(ctx context.Context, id int) (User, error) {
	row := q.db.QueryRowContext(ctx, user, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const userByEmail = `-- name: UserByEmail :one
SELECT
    id, first_name, last_name, email, password, created_at, updated_at, deleted_at
FROM
    users
WHERE
    email = $1
    AND deleted_at IS NULL
LIMIT
    1
`

func (q *Queries) UserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, userByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
