// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package pg

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
UPDATE
    users
SET
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
    users (first_name, last_name, email, PASSWORD)
VALUES
    ($1, $2, $3, $4) RETURNING id
`

type InsertUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var id int
	err := row.Scan(&id)
	return id, err
}

const user = `-- name: User :one
SELECT
    id, first_name, last_name, email, password, created_at, updated_at, deleted_at
FROM
    users
WHERE
    id = $1
    AND deleted_at IS NULL
LIMIT
    1
`

func (q *Queries) User(ctx context.Context, id int) (User, error) {
	row := q.db.QueryRowContext(ctx, user, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
